struct Rhs{P,NP,G,OP,M,A,AT,AE,AH,AM,AEM,AHM, AP, AEP, AHP, GEN} <: Function
    parameters::P
    ndim::NP    # ndim parameters
    g::G        # the grid object
    o::OP       # the operators
    mode::M     #the mode

    mE::A   # neagtive electric field
    mE‚Çë::AE  # negative electric field in ETL
    mE‚Çï::AH  # negative electric field in HTL
    FP::A   # negative anion vavancy flux
    cd::AM   # charge density
    cd‚Çë::AEM  # charge density in ETL
    cd‚Çï::AHM  # charge density in HTL
    fn::A   # electron current
    fn‚Çë::AE  # electron current in ETL
    fp::A   # hole current
    fp‚Çï::AH  # hole current in HTL
    GRu::A   # generation recombination sum
    GRt::AT
    G::GEN    # generation rate of 1 sun 
  
    Buff_N::A
    Buff_N‚Çï::AH
    Buff_N‚Çë::AE
    Buff_N‚Çã‚ÇÅ::AM
    Buff_N‚Çï‚Çã‚ÇÅ::AHM
    Buff_N‚Çë‚Çã‚ÇÅ::AEM

    P::AP
    œï::AP
    n::AP
    p::AP
    œï‚Çë::AEP
    n‚Çë::AEP
    œï‚Çï::AHP
    p‚Çï::AHP
end

function Rhs(parameters,g::Grid,ndim::NodimParameters,op::Operators,mode::Symbol,numtype=Float64)


    d=OrderedDict{Symbol,Any}()
    for key in fieldnames(Rhs)
        d[key]=missing
    end

    
    if numtype <: Union{Float64}
        cache = (u,n) -> DiffEqBase.dualcache(u,n)
    else
        cache = (u,n) -> lcache(length(u))
    end

    N = Val{ForwardDiff.pickchunksize(length(g))}
    d[:parameters] = parameters
    d[:ndim] = ndim
    d[:g] = g
    d[:o] = op
    d[:mode] = mode

    d[:mE]  = cache(zeros(g.N),N)
    d[:mE‚Çë] = cache(zeros(g.N‚Çë),N)
    d[:mE‚Çï] = cache(zeros(g.N‚Çï),N)

    d[:cd]  = cache(zeros(g.N-1),N)
    d[:cd‚Çë] = cache(zeros(g.N‚Çë-1),N)
    d[:cd‚Çï] = cache(zeros(g.N‚Çï-1),N)
    d[:FP]  = cache(zeros(g.N),N)

    d[:fn]  = cache(zeros(g.N),N)
    d[:fp]  = cache(zeros(g.N),N)
    d[:fn‚Çë] = cache(zeros(g.N‚Çë),N)
    d[:fp‚Çï] = cache(zeros(g.N‚Çï),N)
    d[:GRu]  = cache(zeros(g.N),N)
    d[:GRt]  = cache(zeros(g.N),Val{1})
    G = zeros(g.N)
    mul!(G, op.ùï¥, g.x)
    ndim.G(G, G, missing)
    d[:G] = G   
    d[:Buff_N]  = cache(zeros(g.N),N)
    d[:Buff_N‚Çë]  = cache(zeros(g.N‚Çë),N)
    d[:Buff_N‚Çï]  = cache(zeros(g.N‚Çï),N)
    d[:Buff_N‚Çã‚ÇÅ]  = cache(zeros(g.N-1),N)
    d[:Buff_N‚Çë‚Çã‚ÇÅ]  = cache(zeros(g.N‚Çë-1),N)
    d[:Buff_N‚Çï‚Çã‚ÇÅ]  = cache(zeros(g.N‚Çï-1),N)

    d[:œï]   = cache(zeros(g.N+1),N)
    d[:P]   = cache(zeros(g.N+1),N)
    d[:n]   = cache(zeros(g.N+1),N)
    d[:p]   = cache(zeros(g.N+1),N)
    d[:œï‚Çë]  = cache(zeros(g.N‚Çë+1),N)
    d[:n‚Çë]  = cache(zeros(g.N‚Çë+1),N)
    d[:œï‚Çï]  = cache(zeros(g.N‚Çï+1),N)
    d[:p‚Çï]  = cache(zeros(g.N‚Çï+1),N)

    Rhs(collect(values(d))...)
end

function (rhs!::Rhs)(du,u,pr,t)
    Œ¥   = rhs!.ndim.Œ¥
    œá   = rhs!.ndim.œá
    œ∞   = rhs!.ndim.œ∞
    Œª   = rhs!.ndim.Œª
    Œª¬≤  = rhs!.ndim.Œª¬≤
    Œª‚Çë¬≤ = rhs!.ndim.Œª‚Çë¬≤
    Œª‚Çï¬≤ = rhs!.ndim.Œª‚Çï¬≤
    Œ∫‚Çô  = rhs!.ndim.Œ∫‚Çô
    Œ∫‚Çö  = rhs!.ndim.Œ∫‚Çö
    Œ∫‚Çë  = rhs!.ndim.Œ∫‚Çë
    Œ∫‚Çï  = rhs!.ndim.Œ∫‚Çï
    r‚Çë  = rhs!.ndim.r‚Çë
    r‚Çï  = rhs!.ndim.r‚Çï

    N= rhs!.g.N
    N‚Çë=rhs!.g.N‚Çë
    N‚Çï=rhs!.g.N‚Çï

    P   = DiffEqBase.get_tmp(rhs!.P,u)
    œï   = DiffEqBase.get_tmp(rhs!.œï,u)
    n   = DiffEqBase.get_tmp(rhs!.n,u)
    p   =  DiffEqBase.get_tmp(rhs!.p,u)
    @inbounds for i in 1:N+1
        P[i]   = u[i]
        œï[i]    = u[N+1+i]
        n[i]    = u[2*N+2+i]
        p[i]    = u[3*N+3+i]
    end

    œï‚Çë  = DiffEqBase.get_tmp(rhs!.œï‚Çë,u)
    n‚Çë  = DiffEqBase.get_tmp(rhs!.n‚Çë,u)

    @inbounds for i in 1:rhs!.g.N‚Çë
        œï‚Çë[i]   = u[4*N+4+i]
        n‚Çë[i]   = u[4*N+N‚Çë+4+i]
    end
    œï‚Çë[N‚Çë+1] = œï[1]
    n‚Çë[N‚Çë+1] = n[1]/rhs!.ndim.k‚Çë

    œï‚Çï  = DiffEqBase.get_tmp(rhs!.œï‚Çï,u)
    p‚Çï  = DiffEqBase.get_tmp(rhs!.p‚Çï,u)
    œï‚Çï[1]=œï[N+1]
    p‚Çï[1]=p[N+1]/rhs!.ndim.k‚Çï
    #@inbounds @simd
    @inbounds for i in 1:rhs!.g.N‚Çï
        œï‚Çï[i+1]  = u[4*N+2*N‚Çë+4+i]
        p‚Çï[i+1]  = u[4*N+2*N‚Çë+N‚Çï+4+i]
    end

    mE=DiffEqBase.get_tmp(rhs!.mE,u)
    mul!(mE,rhs!.o.ùîá,œï)
    mE‚Çë=DiffEqBase.get_tmp(rhs!.mE‚Çë,u)
    mul!(mE‚Çë,rhs!.o.ùîá‚Çë,œï‚Çë)
    mE‚Çï=DiffEqBase.get_tmp(rhs!.mE‚Çï,u)
    mul!(mE‚Çï,rhs!.o.ùîá‚Çï,œï‚Çï)

    Buff_N=DiffEqBase.get_tmp(rhs!.Buff_N,u)
    Buff_N‚Çë=DiffEqBase.get_tmp(rhs!.Buff_N‚Çë,u)
    Buff_N‚Çï=DiffEqBase.get_tmp(rhs!.Buff_N‚Çï,u)

    if rhs!.parameters.freeze_ions
        FP = DiffEqBase.get_tmp(rhs!.FP,u).*0
    else
        FP  = DiffEqBase.get_tmp(rhs!.FP,u)
            mul!(FP,rhs!.o.ùï¥,P); FP .= FP.*mE;
            mul!(Buff_N ,rhs!.o.ùîá,P)
            FP .= Œª .* (Buff_N .+ FP)
    end

    fn  = DiffEqBase.get_tmp(rhs!.fn,u)
        mul!(fn,rhs!.o.ùï¥,n); fn .= fn.*mE;
        mul!(Buff_N ,rhs!.o.ùîá,n)
        fn .= Œ∫‚Çô.*(Buff_N .- fn)

    fp  = DiffEqBase.get_tmp(rhs!.fp,u)
        mul!(fp,rhs!.o.ùï¥,p); fp .= fp.*mE;
        mul!(Buff_N ,rhs!.o.ùîá,p)
        fp .= Œ∫‚Çö.*(Buff_N .+ fp)

    fn‚Çë  = DiffEqBase.get_tmp(rhs!.fn‚Çë,u)
        mul!(fn‚Çë,rhs!.o.ùï¥‚Çë,n‚Çë); fn‚Çë .= fn‚Çë.*mE‚Çë;
        mul!(Buff_N‚Çë ,rhs!.o.ùîá‚Çë,n‚Çë)
        fn‚Çë .= Œ∫‚Çë.*(Buff_N‚Çë .- fn‚Çë)

    fp‚Çï  = DiffEqBase.get_tmp(rhs!.fp‚Çï,p‚Çï)
        mul!(fp‚Çï,rhs!.o.ùï¥‚Çï,p‚Çï); fp‚Çï .= fp‚Çï.*mE‚Çï;
        mul!(Buff_N‚Çï ,rhs!.o.ùîá‚Çï,p‚Çï)
        fp‚Çï .= Œ∫‚Çï.*(Buff_N‚Çï .+ fp‚Çï)

    cd  = DiffEqBase.get_tmp(rhs!.cd,u)
    
    cd_buff = DiffEqBase.get_tmp(rhs!.Buff_N‚Çã‚ÇÅ,u)
        mul!(cd_buff,rhs!.o.ùîè,P)
        cd .= rhs!.g.NN .- cd_buff .- œ∞
        mul!(cd_buff,rhs!.o.ùîè,n)
        cd .= cd .+ Œ¥.*cd_buff
        mul!(cd_buff,rhs!.o.ùîè,p)
        cd .= cd .- Œ¥.*œá.*cd_buff

    cd‚Çë  = DiffEqBase.get_tmp(rhs!.cd‚Çë,u)
        mul!(cd‚Çë,rhs!.o.ùîè‚Çë,n‚Çë)
        cd‚Çë .= cd‚Çë .- rhs!.g.ddE

    cd‚Çï  = DiffEqBase.get_tmp(rhs!.cd‚Çï,u)
        mul!(cd‚Çï,rhs!.o.ùîè‚Çï,p‚Çï)
        cd‚Çï .= rhs!.g.ddH .- cd‚Çï

    if t isa ForwardDiff.Dual
        GR = DiffEqBase.get_tmp(rhs!.GRt, t)
    else
        GR = DiffEqBase.get_tmp(rhs!.GRu, u)
    end
        mul!(Buff_N, rhs!.o.ùï¥, n)   # Buff_N now contains the interpolatet n
        mul!(GR, rhs!.o.ùï¥, p)       # GR contains interpolated p
        rhs!.ndim.R(GR ,Buff_N, GR) # GR  contains now the recobination rate

   #     mul!(Buff_N, rhs!.o.ùï¥, rhs!.g.x) # Buff_N ontains the interpolated x
    #    rhs!.ndim.G(Buff_N, Buff_N, t) # Buff_N contains generation rate

    #!!! her we have allocs !!!! but alternatives lead to Forward diff erro, or seem to be 25% slower s#####
    l =  rhs!.ndim.G.light(t)

    # This is a dirty hack to buffer the timegradient of genereration function 
    # temporarely in the return du vector
    GR   .= muladd(rhs!.G , l ,-GR)
  
 
    
    @inbounds for i in 1:N-1
        if !rhs!.parameters.freeze_ions
            du[i+1] = FP[i+1] - FP[i];
        else
            du[i+1]=0
        end
        genrec = (rhs!.g.dx[i+1]*GR[i+1]+rhs!.g.dx[i]*GR[i])/2
        du[N+2+i] = mE[i+1]-mE[i]-cd[i]/Œª¬≤;
        du[2*N+3+i] = fn[i+1]-fn[i]+genrec;
        du[3*N+4+i] = fp[i+1]-fp[i]+genrec;
    end
    # P BC
    du[1] = FP[1];      # no Ion flux at bc
    du[N+1] = -FP[N];   # no Ion flux at bc

    # œï BC
    du[N+2] = mE[1]-r‚Çë*mE‚Çë[end] -rhs!.g.dx[1]*(1/2-P[1]/3-P[2]/6+Œ¥*(n[1]/3+n[2]/6-œá*(p[1]/3+p[2]/6)))/Œª¬≤ -r‚Çë*rhs!.g.dx‚Çë[end]*(n‚Çë[end-1]/6+n‚Çë[end]/3-1/2)/Œª‚Çë¬≤; # continuity
    du[2*N+2] = r‚Çï*mE‚Çï[1]-mE[end] -rhs!.g.dx[end]*(1/2-P[end-1]/6-P[end]/3+Œ¥*(n[end-1]/6+n[end]/3-œá*(p[end-1]/6+p[end]/3)))/Œª¬≤ -r‚Çï*rhs!.g.dx‚Çï[1]*(1/2-p‚Çï[1]/3-p‚Çï[2]/6)/Œª‚Çï¬≤; #continuity

    # n BC
    du[2*N+3] = fn[1]-fn‚Çë[end]+(rhs!.g.dx[1]*GR[1])/2 -rhs!.ndim.R‚Çó(n‚Çë[end],p[1]) # continuity
    du[3*N+3] = -fn[end]+rhs!.g.dx[N]*GR[N]/2 -rhs!.ndim.R·µ£(n[N+1],p‚Çï[1])
#    println(du[3*N+3])

    # p BC
    du[3*N+4] = fp[1]+rhs!.g.dx[1]*GR[1]/2 -rhs!.ndim.R‚Çó(n‚Çë[end],p[1])
    du[4*N+4] = fp‚Çï[1]-fp[end]+(rhs!.g.dx[end]*GR[end])/2 -rhs!.ndim.R·µ£(n[N+1],p‚Çï[1]); # continuity
    
    
    ### ETM ###
    du[4*N+5] = œï‚Çë[1]#-rhs!.ndim.V(t);
    du[4*N+N‚Çë+5] = n‚Çë[1]-1;
    @inbounds for i in 1:N‚Çë-1
        du[4*N+5+i] = mE‚Çë[i+1]-mE‚Çë[i]-cd‚Çë[i]/Œª‚Çë¬≤;
        du[4*N+N‚Çë+5+i] = fn‚Çë[i+1]-fn‚Çë[i]
    end
    ### HTM ###
    du[4*N+2*N‚Çë+N‚Çï+4] = œï‚Çï[end] + rhs!.ndim.Vbi - rhs!.ndim.V(t);  
    du[4*N+2*N‚Çë+2*N‚Çï+4] = p‚Çï[end]-1;
    @inbounds for i in 1:N‚Çï-1
        du[4*N+2*N‚Çë+4+i] = mE‚Çï[i+1]-mE‚Çï[i]-cd‚Çï[i]/Œª‚Çï¬≤;
        du[4*N+2*N‚Çë+N‚Çï+4+i] = fp‚Çï[i+1]-fp‚Çï[i];
    end
    # Perform any additional step requested by the optional input argument rhs!.mode
    if rhs!.mode == :cc  # cosed circuit is default
    elseif rhs!.mode == :oc #oopen circuit
        du[4*N+5] = (fn‚Çë[1]-( œï‚Çï[end] +rhs!.ndim.Vbi) *rhs!.ndim.œÉ‚Çõ‚Çï) ;  # no flux except shunt
        du[4*N+2*N‚Çë+N‚Çï+4] =  œï‚Çë[1] # Potential reference at etl contact
        #du[N+1] = integrate(rhs!.g.x,P)-1;
        #du[N+1] = integrate(rhs!.g.x,P)-1)^4;
    elseif rhs!.mode == :precondition
        # Overwrite right-hand BC to ensure conservation of ion vacancies
        #du[4*N+2*N‚Çë+N‚Çï+4] =  œï‚Çë[1]
        du[N+1] = ((integrate(rhs!.g.x,abs.(P))-1));
        #du[4*N+2*N‚Çë+N‚Çï+4] = œï‚Çï[end] +rhs!.ndim.Vbi - rhs!.ndim.V(t)
    else
        error("simulation mode $(rhs!.mode) is not recongnized")
    end
  
    return nothing
end


struct LCache{T,I}
    du::T
    length::I
end

lcache(n::Int) = LCache(Dict{DataType,AbstractArray}(),n)

function DiffEqBase.get_tmp(lc::LCache,u::T)::T where {T<:AbstractArray} 
    ltype = eltype(u)
    !(haskey(lc.du,ltype)) && (lc.du[ltype] = u[1:lc.length])
    return lc.du[ltype]
end

function DiffEqBase.get_tmp(lc::LCache,u::T)::Array{T,1} where {T<:Number} 
    
    !(haskey(lc.du,T)) && (lc.du[T] = Array{T,1}(undef,lc.length))
    return lc.du[T]
end
