var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"Modules = [AnnA]\nPages   = [\"routines/helpers.jl\"]\nOrder   = [:functi, :type]","category":"page"},{"location":"api/#AnnA.Pulse","page":"API","title":"AnnA.Pulse","text":"struct Pulse{A, AA, T, TT, I} <: Function\n\nHolds all information about the pulse formation.\n\nArguments:\n\nΔh: Pulse Amplitude\nh₀: Baseline\nw: Pulse width\nΔt: rise and fall time\ntₑ: end time (end of fall)\nts: array of timepoints\nhs: array of amplitude points\nitp: interploating function\n\n\n\n\n\n","category":"type"},{"location":"api/#AnnA.Pulse-Tuple{Any}","page":"API","title":"AnnA.Pulse","text":"(p::Pulse)(t)\n\ncalls the interpolating function from Pulse\n\n\n\n\n\n","category":"method"},{"location":"api/#LinearAlgebra.Tridiagonal-Union{Tuple{T}, Tuple{L}, Tuple{Integer, T, T, T}} where {L<:Number, T<:Union{AbstractVector{L}, Number}}","page":"API","title":"LinearAlgebra.Tridiagonal","text":"(LinearAlgebra.Tridiagonal(N::Integer, a::T, b::T, c::T) where T <: Union{Number, AbstractArray{L, 1}}) where L <: Number\n\nA simple wrapper for creating tridiagonal matrices a bit more convineantly\n\nArguments:\n\nN: Size of the NxN tridiagonal\na: row a\nb: row b\nc: row c\n\nExample\n\njulia> AnnA.Tridiagonal(4,1,-2,-1)\n4×4 LinearAlgebra.Tridiagonal{Int64, Vector{Int64}}:\n -2  -1   ⋅   ⋅\n  1  -2  -1   ⋅\n  ⋅   1  -2  -1\n  ⋅   ⋅   1  -2\n\n\n\n\n\n","category":"method"},{"location":"working_principle/finite_element_scheme/#Couriers-Finite-Element-Scheme","page":"Finite Element Scheme","title":"Couriers Finite Element Scheme","text":"","category":"section"},{"location":"working_principle/finite_element_scheme/","page":"Finite Element Scheme","title":"Finite Element Scheme","text":"The interested reader should consult Courtiers original publications [1] here we will provide only a few important fundamentals necessary to understand a few important limitations from fundamental physical perspective as well as in some numerical aspects.","category":"page"},{"location":"working_principle/finite_element_scheme/#Spatial-*tanh*-grid","page":"Finite Element Scheme","title":"Spatial tanh grid","text":"","category":"section"},{"location":"working_principle/finite_element_scheme/","page":"Finite Element Scheme","title":"Finite Element Scheme","text":"In order to coupe with the spatial stiffness the PDE is discretized by a non uniform grid which is more dense within the ionic accumulation layers at the interface. This helps to overcome numerical inaccuracies the finite difference gradients during the integration of the PDE.  ","category":"page"},{"location":"working_principle/finite_element_scheme/#Non-dimensionalization","page":"Finite Element Scheme","title":"Non dimensionalization","text":"","category":"section"},{"location":"working_principle/finite_element_scheme/#Implementation","page":"Finite Element Scheme","title":"Implementation","text":"","category":"section"},{"location":"working_principle/finite_element_scheme/#OrdinaryDiffEq.jl-Solvers","page":"Finite Element Scheme","title":"OrdinaryDiffEq.jl Solvers","text":"","category":"section"},{"location":"working_principle/finite_element_scheme/#Sparsity","page":"Finite Element Scheme","title":"Sparsity","text":"","category":"section"},{"location":"working_principle/finite_element_scheme/#Automatic-Differentiation","page":"Finite Element Scheme","title":"Automatic Differentiation","text":"","category":"section"},{"location":"working_principle/finite_element_scheme/","page":"Finite Element Scheme","title":"Finite Element Scheme","text":"[1]: Courtier, N.E., Cave, J.M., Walker, A.B. et al.\nIonMonger: a free and fast planar perovskite solar cell simulator with coupled ion vacancy and charge carrier dynamics.\nJ Comput Electron 18, 1435–1449 (2019). https://doi.org/10.1007/s10825-019-01396-2","category":"page"},{"location":"examples/proto_sim/#Predefined-Protocols","page":"Problems","title":"Predefined Protocols","text":"","category":"section"},{"location":"examples/proto_sim/","page":"Problems","title":"Problems","text":"Convenient wrappers are predefined to simplify the simulation of most important protocols.","category":"page"},{"location":"examples/proto_sim/#IV-Simulations","page":"Problems","title":"IV Simulations","text":"","category":"section"},{"location":"examples/proto_sim/","page":"Problems","title":"Problems","text":"The simulation of an IV curve can be done by the IVProblem constructor","category":"page"},{"location":"examples/proto_sim/","page":"Problems","title":"Problems","text":"IVProblem","category":"page"},{"location":"examples/proto_sim/#AnnA.IVProblem","page":"Problems","title":"AnnA.IVProblem","text":"IVProblem(\n    parm::Parameters,\n    range::Union{AbstractArray,Tuple},\n    rate;\n    double_sweep = true,\n    alg_control = AlgControl(dtmin = 1e-20,\n        dt = 1e-6,\n        reltol = 1e-4,\n        abstol = 1e-12,\n        tend = abs(sum(diff(range))) / abs(rate) * (1+double_sweep)\n    ),  \n)\n\nCreates an IVProblem. The voltage parameter V defined in parm will be overwritten by the linear voltage sweep defined as V = t-> first(range) + rate*t. AlgControl.tend is forced to be abs(sum(diff(range))) / abs(rate) * (1+double_sweep), an overwrite can be done on the finalized object using Setfield: p = Setfield.setproperties(p::IVProblem, alg_control=AlgControl(...)). \n\nnote: Units\nIf no units provided for range and rate, V and V/s is assumed. \n\n\n\n\n\n","category":"type"},{"location":"examples/proto_sim/","page":"Problems","title":"Problems","text":"Here is a simple example on how to use","category":"page"},{"location":"examples/proto_sim/","page":"Problems","title":"Problems","text":"using AnnA\nusing Unitful, UnitfulRecipes\nparm = Parameters(light = t -> 1.0,   \n    vₙₕ= 10u\"m/s\" ,                 # electron surface recombination vel. at HTM\n    vₚₕ= 0.01u\"m/s\" ,               # hole surface recombination vel. at HTM\n    N=500,                          # grid size\n    N₀=1e18u\"cm^-3\"                 # ionic concentration\n)\nprob = IVProblem(parm, [-0.5,1.7]u\"V\", 0.2u\"V/s\")\nsol  = solve(prob)","category":"page"},{"location":"examples/proto_sim/","page":"Problems","title":"Problems","text":"The ProblemSolution object contains also grid and spatial information. All timesteps are stored in a DataFrame an can be acessed via the df field of sol. If we just want to plot the IV characteristics we can do: ","category":"page"},{"location":"examples/proto_sim/","page":"Problems","title":"Problems","text":"using Plots\nusing UnitfulRecipes  # To interface Unitful with Plots\n\nsol=sol.df\nsol.j = sol.j .|>u\"mA/cm^2\" # scale to common units\nplt = plot(sol.V[sol.fwd], sol.j[sol.fwd],label=\"Forward\", ylims=(-25,40),xlims=(-0.5,1.3),legend=:topleft);\nplot!(plt,sol.V[.!sol.fwd], sol.j[.!sol.fwd],label=\"Backward\");\nplt","category":"page"},{"location":"examples/proto_sim/#Jsc-vs.-Voc-Curve","page":"Problems","title":"Jsc vs. Voc Curve","text":"","category":"section"},{"location":"examples/proto_sim/","page":"Problems","title":"Problems","text":"The wrapper implements j_sc(V_oc) simulation by two consecutive simulation runs, where the illumination is increased exponentially over time. This reflects the aspect of a slow V_oc built up under low illumination intensities.","category":"page"},{"location":"examples/proto_sim/#Open-Circuit-Voltage-Decay-(OCVD)","page":"Problems","title":"Open Circuit Voltage Decay (OCVD)","text":"","category":"section"},{"location":"examples/proto_sim/","page":"Problems","title":"Problems","text":"To simulate a open circuit voltage decay a OCVDProblem is implemented:","category":"page"},{"location":"examples/proto_sim/","page":"Problems","title":"Problems","text":"prob_ocvd = OCVDProblem(\n    parm,       # input parameter set\n    50u\"s\",     # illumination time\n    1e5u\"s\",    # time the decay will be simulated to\n) \n\nsol = solve(prob_ocvd)  \nplot(sol.t_decay,sol.V_decay,xscale=:log10,xlims=(1e-8,1e5))","category":"page"},{"location":"working_principle/physical_concepts/#Physical-Concepts","page":"Physical Concepts","title":"Physical Concepts","text":"","category":"section"},{"location":"working_principle/physical_concepts/#Fundamental-Conservation-Laws","page":"Physical Concepts","title":"Fundamental Conservation Laws","text":"","category":"section"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"In a homogeneous thin-film solar cell where the device area is magnitudes larger than the thickness, it is sufficient to consider only the out of plane dimension. The electrons n, holes p, and ionic species P obey the conservation laws listed below: ","category":"page"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"    beginaligned\n        fracpartial npartial t = frac1qfracpartial j_npartial x  +G - R \n        j_n = qD^-left(fracpartial npartial x - fracnqk_BTfracpartial phipartial xright) \n        fracpartial ppartial t = frac-1qfracpartial j_ppartial x +G - R \n        j_p = -qD^+left(fracpartial ppartial x + fracpqk_BTfracpartial phipartial xright) \n        fracpartial Ppartial t = frac-1qfracpartial j_ionpartial x \n        j_ion = -qD_ionleft(fracpartial Ppartial x + fracPqk_BTfracpartial phipartial xright)   \n    endaligned","category":"page"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"The respective current densities j_n, j_p and j_ion are composed of diffusion and field driven components, whereby the electric field is provided by the Poisson equation: ","category":"page"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"    0 =fracpartial^2phipartial x^2 -fracq(N_ion-P+n-p-d_n+d_p)varepsilon_PEH","category":"page"},{"location":"working_principle/physical_concepts/#Transport-layers","page":"Physical Concepts","title":"Transport layers","text":"","category":"section"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"For the transport layers simplified equations were applied. These specifically consisted of the assumptions that the HTM / ETM only conducts holes / electrons (D^-  D^+ = 0 ) and zero charge generation G and recombination R takes place, as well as there are no mobile ions present (P=N_ion=0). In case of the active layer we assumed an absence of doping, so that d_n = d_p = 0. D^- and D^+ are the corresponding diffusion coefficients. For neutrality reasons the Poisson equation must also contain the immobile counterpart of the mobile ionic species, which is assumed to be uniformly distributed in the active layer.","category":"page"},{"location":"working_principle/physical_concepts/#Generation-profile","page":"Physical Concepts","title":"Generation profile","text":"","category":"section"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"For charge carrier generation G(x) a simple Lambert Beer absorption of the incident photon flux F-ph is assumed","category":"page"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"    G(x) = F_ph e^-alpha x","category":"page"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"Its important to note, that this assumption may be incorrect in case of thin devices where interference can happen.","category":"page"},{"location":"working_principle/physical_concepts/#Recombination-mechanisms","page":"Physical Concepts","title":"Recombination mechanisms","text":"","category":"section"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"The bulk recombination behavior in the simulations is composed of Shockley-Read-Hall, and bimolecular recombination ","category":"page"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"    Rbigl(npbigr) = frac(ncdot p - n_i)tau_p cdot (n + n_t) +tau_n cdot (p+p_t)+k_radcdot(ncdot p - n_i)","category":"page"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"Thereby it is approximated, that the defects are located close to center of the band gap so that we can simplify the equation with n_t =p_t = n_i For surface recombination a similar expression is assumed. Here, the charge carriers from the transport layers are assumed to recombine together with their opposite ones from the active layer. We also allow the surface recombination velocities nu_p_E nu_n_E at the ETM/active layer interface to differ from nu_p_H nu_n_H at the active layer/HTM interface.","category":"page"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"    R_EHbigl(n_lrp_rlbigr) = frac(n_lrcdot p_rl - n_i)1nu_p_EH cdot (n_lr+ n_tlr)+1nu_n_EH cdot (p_rl + p_trl)","category":"page"},{"location":"working_principle/physical_concepts/","page":"Physical Concepts","title":"Physical Concepts","text":"where n_lr p_lr, indicates the carrier densities left/right of the interface if the layer sequence ETM-Intrinsic-HTM is present.","category":"page"},{"location":"working_principle/physical_concepts/#Density-of-states-and-doping","page":"Physical Concepts","title":"Density of states and doping","text":"","category":"section"},{"location":"working_principle/physical_concepts/#Intrinsic-carrier-density-and-temperature","page":"Physical Concepts","title":"Intrinsic carrier density and temperature","text":"","category":"section"},{"location":"#AnnA.jl","page":"Home","title":"AnnA.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AnnA.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"A rewrite of Couriters IonMonger ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The implementation is based on Courtiers finite element scheme. The original Matlab implementation IonMonger is also freely available on GitHub, however Matlab as proprietary software basis restricts the tool to institutions and people owning a suitable license. This implementation is solely written in julia and therefore free to use for every body owning a x86 computer. ","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"CurrentModule = AnnA","category":"page"},{"location":"interface/parameters/#Simulation-Parameters","page":"Simulation parameters","title":"Simulation Parameters","text":"","category":"section"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"The interface is designed for a convenient access to the core functionality. One of the most important aspects the user should be able to control are the input Parameters. This can be archived via the Parameters() constructor.","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"Parameters","category":"page"},{"location":"interface/parameters/#AnnA.Parameters","page":"Simulation parameters","title":"AnnA.Parameters","text":"Parameters(;       \n    N  =   400,                 # Subintervals in perovskite layer, \n                                # resulting in N+1 Grid points\n\n    # Physical parameters\n    ε₀ = 8.854187817e-12u\"F/m\" , # Permitivity of free space\n    q  = 1.6021766209e-19u\"C\",   # Elemntary charge of a proton\n    kB = 8.61733035e-5u\"eV/K\",   # Bolzmann konstant\n\n    # Perovskite parameters\n    b  = 400e-9u\"m\",             # Perovskite layer thickness\n    ε = 24.1,                    # Perovskite permitivity\n    Ec = -3.7u\"eV\",              # Perovskite conduction band energy\n    Ev = -5.3u\"eV\",              # Perovskite valence band energy\n    dₚ = 0u\"m^-3\",               # Perovskite doping concentration\n    Dₙ = 1.7e-4u\"m^2/s\",         # Perovskite electron diffusion coefficient\n    Dₚ = 1.7e-4u\"m^2/s\",         # Perovskite hole diffusion coefficient\n    mₑ = 0.2,                    # Perovskite effective electron mass\n    mₕ = 0.2,                    # Perovskite effective hole mass\n    \n    # Ion Parameters\n    N₀ = 1.6e24u\"m^-3\",          # Typical density of ion vacancys\n    Dᵢ₀ = 6.5e-8u\"m^2/s\",        # Diffusion constant\n    Eᵢₐ = 0.58 * u\"eV\",          # Ativation energy of vacancy diffusion\n    freeze_ions = false,\n    \n    # Environment Parameters\n    T  = 300u\"K\",                # Temperature\n    α  = 1.3e7u\"1/m\",            # Perovskite absorption koefficient\n    Fₚₕ = 1.4e21u\"m^-2*s^-1\",    # 1 Sun absorbed photonflux \n    dir = 1,                     # Light trough  1 -> ETL, -1 -> HTL\n    light = pulse(tₑ=1.0,w=2.),       # Light(t) function \n    V = t -> 0,                  # Voltage(t) function\n    Rₛₕ = 1e6u\"V/A*m^2\",         # Shunt resistance\n\n    # Recombination Parameters\n    τₙ = 3e-7u\"s\",             # electron pseudo lifetime\n    τₚ = 3e-7u\"s\",             # hole pseudo lifetime\n    k₂ = 3.22e-17u\"m^3/s\",     # second order rate constant\n\n    # Interface Recombination\n    k₂ₑ = 0u\"m^4/s\",           # ETL/perovskite bimolecular recombination rate\n    k₂ₕ = 0u\"m^4/s\",           # perovskite/HTL bimolecular recombination rate\n    vₙₑ = 0u\"m/s\",             # electron recombination velocity for SHR/ETL\n    vₚₑ = 0u\"m/s\",             # hole recombination velocity for SHR/ETL\n    vₙₕ = 0u\"m/s\",             # electron recombination velocity for SHR/HTL\n    vₚₕ = 0u\"m/s\",             # hole recombination velocity for SHR/HTL\n\n    # ELT Parameters\n    dₑ = 1e18u\"cm^-3\",         # ETL effective doping density\n    mcₑ = 1.5,                 # ETL effective electron mass\n    Ecₑ = -4.0 * u\"eV\",        # ETL conduction band energy\n    bₑ = 100e-9u\"m\",           # ETL width\n    εₑᵣ = 3,                   # ETL permitivity\n    Dₑ = 1e-7u\"m^2/s\",         # ETL electron diffusion coeficcient\n\n    # HTL Parameters\n    dₕ = 1e18u\"cm^-3\",         # HTL effective doping density\n    mvₕ = 12,                  # HTL hole mass\n    Evₕ = -5 * u\"eV\",          # HTL valence band energy\n    bₕ = 100e-9u\"m\",           # HTL width\n    εₕᵣ = 3,                   # HTL permitivity\n    Dₕ = 1e-7u\"m^2/s\",         # HTL electron diffusion coeficcient\n)\n\nConstructs the parameters object from the defaults.\n\nExamples\n\ndef_parm = Parameters()         # Use the default parameters\nmod_parm = Parameters(          # Use modified default parameters \n    b  = 432u\"nm\",              # Perovskite Layer thickness\n    ε = 42,                     # Perovskite permitivity\n)\n\n\n\n\n\n","category":"type"},{"location":"interface/parameters/#Transient-Parameters","page":"Simulation parameters","title":"Transient Parameters","text":"","category":"section"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"The fields light and V , correspond to the illumination and voltage transients during the simulation. They must be both of type Function and take one argument of type Real which corresponds to the time in seconds. ","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"using AnnA # hide\nusing Unitful # hide \nParameters(V = t -> 0.42)   # Constant voltage of 420 mV\nParameters(V = t -> 0.5*t)  # Voltage ramp with a slope of 0.5V/s\n\nfunction l(t)\n    1/2*(sin(t)+1)\nend\n\nParameters(light = l)       # Sinusiodal light excitation with 1 Sun amplitude","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"The solver generally likes continuous functions, but may also work for a broad range of discontinuous light. ","category":"page"},{"location":"interface/parameters/#Ionic-Motion","page":"Simulation parameters","title":"Ionic Motion","text":"","category":"section"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"The mobile ions are controlled by the concentration N₀, diffusion constant Dᵢ₀ with the activation energy Eᵢₐ. ","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"note: Disable ionic motion\nTo disable ion movement, use freeze_ions = true. The setting N₀=0, Dᵢ₀ = 0 or Eᵢₐ=Inf results in zero divisions during non-dimensioning and lead to an error.","category":"page"},{"location":"interface/parameters/#Implicit-Parameters","page":"Simulation parameters","title":"Implicit Parameters","text":"","category":"section"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"Values for other important device parameters are implicitly provided from the input in Parameters(). ","category":"page"},{"location":"interface/parameters/#Effective-Density-Of-States","page":"Simulation parameters","title":"Effective Density Of States","text":"","category":"section"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"This conduction / valence band DOS \tN_cv is calculated from the free electron gas approximation, electron/hole effective mass m_eh, the Bolzmann constant k_B, temperature T, Electron rest mass m_0 and Planck constant h via:","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"N_cv = 2left(frac2pi m_eh  m_0  k_B Th^2   right)^32","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"parm = Parameters(mₑ=0.2, mₕ=0.2, T=300u\"K\");\t\nparm.Nc\nparm.Nv","category":"page"},{"location":"interface/parameters/#Intrinsic-Carrier-Density","page":"Simulation parameters","title":"Intrinsic Carrier Density","text":"","category":"section"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"n_i is defined by the Temperature, N_cv and the Bandgap E_g by the mass action law:","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"n_i^2 = N_cN_v cdot e^frac- E_g k_B T","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"parm.nᵢ","category":"page"},{"location":"interface/parameters/#Fermi-Level","page":"Simulation parameters","title":"Fermi Level","text":"","category":"section"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"The Fermi-level Ef_eh in the electron / hole trasportlayer can be expressed by thair doping density  d_eh, effective DOS and bandenergy E_ce  E_vh,  ","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"beginaligned\nEf_e  = E_ce - k_BT log(N_ced_e) \nEf_h    = E_vh + k_BT log(N_vhd_h)\nendaligned","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"parm.Efₑ\nparm.Efₕ","category":"page"},{"location":"interface/parameters/#Built-In-Potential","page":"Simulation parameters","title":"Built In Potential","text":"","category":"section"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"The difference in fermi levels between ETM and HTM define the built in potential V_Bi","category":"page"},{"location":"interface/parameters/","page":"Simulation parameters","title":"Simulation parameters","text":"parm.Efₑ - parm.Efₕ\nparm.Vbi","category":"page"},{"location":"interface/problems/#Problem-Types","page":"Problem definition","title":"Problem Types","text":"","category":"section"},{"location":"interface/problems/","page":"Problem definition","title":"Problem definition","text":"For simplicity rappers for several simulation routines are defined. ","category":"page"},{"location":"interface/problems/#IVProblem","page":"Problem definition","title":"IVProblem","text":"","category":"section"},{"location":"interface/problems/#JscVocProblem","page":"Problem definition","title":"JscVocProblem","text":"","category":"section"},{"location":"interface/problems/#OCVDProblem","page":"Problem definition","title":"OCVDProblem","text":"","category":"section"},{"location":"interface/problems/#TPVProblem","page":"Problem definition","title":"TPVProblem","text":"","category":"section"},{"location":"interface/problems/#Costume-Simulation-Routine","page":"Problem definition","title":"Costume Simulation Routine","text":"","category":"section"},{"location":"interface/problems/#Porblem-Solution","page":"Problem definition","title":"Porblem Solution","text":"","category":"section"},{"location":"interface/problems/","page":"Problem definition","title":"Problem definition","text":"The ","category":"page"},{"location":"interface/problems/#Algorithm-Control","page":"Problem definition","title":"Algorithm Control","text":"","category":"section"}]
}
